import random

def RANDOM_SOLUTION(X):
    CITIES = list(range(len(X)))
    SOLUTION = []

    for I_COUNT in range(len(X)):
        RANDOM_CITY = CITIES[random.randint(0, len(CITIES) - 1)]
        SOLUTION.append(RANDOM_CITY)
        CITIES.remove(RANDOM_CITY)

    return SOLUTION

def ROUTE_LENGTH(X, SOLUTION):
    ROUTE_LENGTH = 0
    for I_COUNT in range(len(SOLUTION)):
        ROUTE_LENGTH += X[SOLUTION[I_COUNT - 1]][SOLUTION[I_COUNT]]
    return ROUTE_LENGTH

def GET_NEIGHBOURS(SOLUTION):
    NEIGHBOURS = []
    for I_COUNT in range(len(SOLUTION)):
        for J_COUNT in range(I_COUNT + 1, len(SOLUTION)):
            NEIGHBOUR = SOLUTION.copy()
            NEIGHBOUR[I_COUNT] = SOLUTION[J_COUNT]
            NEIGHBOUR[J_COUNT] = SOLUTION[I_COUNT]
            NEIGHBOURS.append(NEIGHBOUR)
    return NEIGHBOURS

def GET_BEST_NEIGHBOUR(X, NEIGHBOURS):
    BEST_ROUTE_LENGTH = ROUTE_LENGTH(X, NEIGHBOURS[0])
    BEST_NEIGHBOUR = NEIGHBOURS[0]
    for NEIGHBOUR in NEIGHBOURS:
        CURRENT_ROUTE_LENGTH = ROUTE_LENGTH(X, NEIGHBOUR)
        if CURRENT_ROUTE_LENGTH < BEST_ROUTE_LENGTH:
            BEST_ROUTE_LENGTH = CURRENT_ROUTE_LENGTH
            BEST_NEIGHBOUR = NEIGHBOUR
    return BEST_NEIGHBOUR, BEST_ROUTE_LENGTH

def HILL_CLIMBING(X):
    CURRENT_SOLUTION = RANDOM_SOLUTION(X)
    CURRENT_ROUTE_LENGTH = ROUTE_LENGTH(X, CURRENT_SOLUTION)
    NEIGHBOURS = GET_NEIGHBOURS(CURRENT_SOLUTION)
    BEST_NEIGHBOUR, BEST_NEIGHBOUR_ROUTE_LENGTH = GET_BEST_NEIGHBOUR(X, NEIGHBOURS)

    while BEST_NEIGHBOUR_ROUTE_LENGTH < CURRENT_ROUTE_LENGTH:
        CURRENT_SOLUTION = BEST_NEIGHBOUR
        CURRENT_ROUTE_LENGTH = BEST_NEIGHBOUR_ROUTE_LENGTH
        NEIGHBOURS = GET_NEIGHBOURS(CURRENT_SOLUTION)
        BEST_NEIGHBOUR, BEST_NEIGHBOUR_ROUTE_LENGTH = GET_BEST_NEIGHBOUR(X, NEIGHBOURS)

    return CURRENT_SOLUTION, CURRENT_ROUTE_LENGTH

def PROBLEM_GENERATOR(N_CITIES):
    X = []
    for I_COUNT in range(N_CITIES):
        DISTANCES = []
        for J_COUNT in range(N_CITIES):
            if J_COUNT == I_COUNT:
                DISTANCES.append(0)
            elif J_COUNT < I_COUNT:
                DISTANCES.append(X[J_COUNT][I_COUNT])
            else:
                DISTANCES.append(random.randint(10, 1000))
        X.append(DISTANCES)
    return X
